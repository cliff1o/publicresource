# This is a basic workflow to help you get started with Actions

name: Sync to GitCode

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:



jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: Push to GitCode Main Branch
      env:
        GITCODE_TOKEN: ${{ secrets.GITCODE_TOKEN }}
      run: |
        git remote add gitcode https://oauth2:$GITCODE_TOKEN@gitcode.com/2301_79002849/lgres.git
        git fetch gitcode d0
        # Fetch changes from GitCode main branch
        git fetch gitcode main

        # Merge remote changes into local branch
        git merge gitcode/main --strategy-option=theirs || true

        # Push local changes to GitCode main branch
        git push gitcode main
        
    - name: List all non-JSON files and folders
      run: |
        mkdir file_info
        find . -type f -not -path "./.git/*" -not -name "*.json" -not -name "*.ztmp" -not -name "*.sample" -exec sh -c 'echo "{ \"path\": \"$(printf "%s\n" {} | cut -c 3-)\", \"name\": \"$(basename {})\", \"servertype\": 1, \"compressed\": \"normal\", \"tunnel\": \"git\", \"time\": \"$(git log -1 --format=%aI {} | xargs)\" }" > file_info/$(basename {}).json' \;
   
    - name: Combine JSON files into one
      run: |
        echo '[' > all_files.json
        find file_info -name "*.json" -exec cat {} \; | sed 's/$/,/' >> all_files.json
        sed -i '$ s/,$//' all_files.json
        echo ']' >> all_files.json
        
    - name: List out this time change
      run: |
        echo '[' > edit.json
        git ls-files | while read file ; do
          if [[ $file == *.mdl || $file == *.wav || $file == *.mp3 || $file == *.bsp || $file == *.wad || $file == *.nav || $file == *.res || $file == *.txt ]]; then
            status=$(git diff --name-status HEAD~1 $file | awk '{print $1}')
            if [ "$status" = "A" ]; then
              change="add"
            elif [ "$status" = "D" ]; then
              change="remove"
            elif [ "$status" = "M" ]; then
              change="edit"
            else
              continue
            fi
            echo "{ \"path\": \"$file\", \"name\": \"$(basename $file)\", \"server_type\": 1, \"compressed\": \"normal\", \"tunnel\": \"git\", \"type\": \"$change\", \"time\": \"$(git log -1 --format=%aI $file | xargs)\" }," >> edit.json
          fi
        done
        sed -i '$s/,$//' edit.json
        echo ']' >> edit.json
        

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: all-files
        path: |
          all_files.json
          edit.json
          
  use-edit-json:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: all-files

    - name: Do something with edit.json
      run: |
        # 在這裡添加你想用 edit.json 做的事情
        cat edit.json
